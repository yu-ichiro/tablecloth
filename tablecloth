#! /bin/zsh
# tablecloth 

# ...REQUIRES iptables
IPTABLES=$(which iptables 2>/dev/null)

if [ "$?" != "0" ];then
    echo "This Script is a wrapper for iptables"
    echo "You need to install iptables first"
    echo "=================================="
    echo
    IPTABLES=:
#   exit
fi

# set global log prefix
lpre="[firewall]"

##################
# iptable chains #
##################

# blacklist
function blackcheck () {
    [ ! -e /etc/firewall/blacklist ]&& return
    $IPTABLES -N BLACK
    for blackip in $(cat /etc/firewall/blacklist);do
        $IPTABLES -A BLACK -s $blackip -j DROP
    done

    $IPTABLES -A INPUT -j BLACK
}

# whitelist
function whitecheck () {
    [ ! -e /etc/firewall/whitelist ]&& return
    $IPTABLES -N WHITE
    for whiteip in $(cat /etc/firewall/whitelist);do
        $IPTABLES -A -s $whiteip -j ACCEPT
    done

    $IPTABLES -A INPUT -j WHITE
}

# ping --limit
function pings () {
    # 1 packet per 2sec
    $IPTABLES -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 1 -j ACCEPT
    $IPTABLES -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 1 -j LOG --log-prefix "${lpre}fast-ping:"
    $IPTABLES -A INPUT -p icmp --icmp-type echo-request -j DROP
}

# cc ( accept | drop ) [country code..]
function cc () {
    local ACTION=${1:-N}
    shift
    [ "$ACTION" != "ACCEPT" -a "$ACTION" != "DROP" ]&&return
    local chainname=${ACTION}_$(echo $@ | sed "s/ /_/g")
    [ ! -e /etc/firewall/cidr.txt ]&& return
    $IPTABLES -N $chainname
    for cc in $@;do
        sed -n "s/^${cc}\t//p" /etc/firewall/cidr.txt | while read address;do
            $IPTABLES -A $chainname -s $address -j ${ACTION}
        done
    done
}

# fragment
function fragment () {
   $IPTABLES -A INPUT -f -m limit --limit 30/m -j LOG --log-level=debug --log-prefix "${lpre}frag:"
   $IPTABLES -A INPUT -f -j DROP
}

# stealth_scan
function stealth_scan () {
    $IPTABLES -N STEALTH_SCAN # "STEALTH_SCAN" という名前でチェーンを作る
    $IPTABLES -A STEALTH_SCAN -m limit --limit 30/m -j LOG --log-level=debug --log-prefix "${lpre}stealth:"
    $IPTABLES -A STEALTH_SCAN -j DROP

    # ステルススキャンらしきパケットは "STEALTH_SCAN" チェーンへジャンプする
    $IPTABLES -A INPUT -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags ALL NONE -j STEALTH_SCAN

    $IPTABLES -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN         -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST         -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j STEALTH_SCAN

    $IPTABLES -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags ACK,FIN FIN     -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags ACK,PSH PSH     -j STEALTH_SCAN
    $IPTABLES -A INPUT -p tcp --tcp-flags ACK,URG URG     -j STEALTH_SCAN
}

# SSH Access

# HTTP --hash-limit

#######################
# predefine functions #
#######################

# tableset(isSilent)
function tableset () {
    local LOGC=${1:-echo}
    $LOGC "Setting iptable..."
    $LOGC "Flushing old rules.."
    $IPTABLES -F
    $LOGC "Flushing old chains.."
    $IPTABLES -X
    
    $LOGC "INPUT Policy: DROP"
    $IPTABLES -P INPUT DROP
    $LOGC "OUTPUT Policy: ACCEPT"
    $IPTABLES -P OUTPUT ACCEPT
    $LOGC "FORWARD Policy: DROP"
    $IPTABLES -P FORWARD DROP
    
    $LOGC "Broadcast, Multicast: DROP"
    $IPTABLES -A INPUT -m addrtype --dst-type BROADCAST,MULTICAST -m limit --limit 30/m -j LOG --log-prefix "${lpre}bcast-mcast:" --log-level=debug
    $IPTABLES -A INPUT -m addrtype --dst-type BROADCAST,MULTICAST -j DROP
    $LOGC "Loopbacks: ACCEPT"
    $IPTABLES -A INPUT -i lo -j ACCEPT
    $IPTABLES -A OUTPUT -o lo -j ACCEPT

    $LOGC "Established Connections: ACCEPT"
    $IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    
    $LOGC "Whitelist: ACCEPT"
    whitecheck

    $LOGC "Blacklist: DROP"
    blackcheck

    $LOGC "DROP CN IN EG PK"
    cc DROP CN IN EG PK
    $IPTABLES -A INPUT -j DROP_CN_IN_EG_PK

    $LOGC "Stealth Scan: DROP"
    stealth_scan
    $LOGC "Fragment: DROP"
    fragment
    $LOGC "Services:"
    $LOGC "Ping: ACCEPT every 2secs"
    pings
    $LOGC "IDENT: REJECT"
    $IPTABLES -A INPUT -p tcp --dport 113 -j REJECT --reject-with tcp-reset
    $LOGC "SSH($SSH_PORT): ACCEPT"
    $IPTABLES -A INPUT -p tcp --dport $SSH_PORT -j ACCEPT

    $IPTABLES -A INPUT -m limit --limit 1/s -j LOG --log-prefix "${lpre}matchfailed: " --log-level=debug
    $IPTABLES -A INPUT -j DROP

}
# blacklist_add()

# table_save()

# table_restart()

# help()
function help() {
    cat << EOF
--------
 Usage:
--------
-h ([h]elp): Display this help and exit.
-r ([r]eload): Reload rule only.
-R ([R]eboot): Save current settings and reboot iptables completely
-p ([p]rint): Print only. Don't execute anything
-q ([q]uiet): Supress Progress log
-b [ip-address] (add to [b]lacklist): Add the address to the blacklist and reload enforce rule.
EOF
exit
}

################
# Main Process #
################

# Flag decleration
local reload=false reboot=false badaddress= printonly=false quiet=echo

# process options

[ "${1}" != "" ]|| help 
while getopts :b:qrRph opt;do
    case $opt in
        r) reload=true;;
        R) reboot=true;;
        b) badaddress=$OPTARG;;
        p) printonly=true;;
        q) quiet=:;;
        h) help;;
        \?) echo "[Fatal] Illegal option -$OPTARG"
            echo 
            help;;
    esac
done

$reload && tableset $quiet
$reboot && echo "reboot"
[ "$badaddress" != "" ]&&echo "$badaddress"
$printonly && echo "printonly" 
